version: "3"

services:
  redis:
    image: redis:3.2-alpine
    ports:
      - "6379"
    networks:
      - vote-net
    deploy:
      placement:
        constraints: [node.role == manager]

  db:
    image: postgres:9.4
    volumes:
      - dbdata:/var/lib/postgresql/data
    networks:
      - vote-net
    deploy:
      placement:
        constraints: [node.role == manager]

  vote:
    image: ekambaram/votingui:v1
    command: python app.py
    ports:
      - 5000:80
    networks:
      - vote-net
    depends_on:
      - redis
    deploy:
      mode: replicated
      replicas: 2
      labels: [APP=VOTING]
      placement:
        constraints: [node.role == worker]

  result:
    image: ekambaram/votingresult:v1
    command: nodemon --debug server.js
    ports:
      - 8080:80
      - 5858:5858
    networks:
      - vote-net
    depends_on:
      - db

  worker:
    image: ekambaram/votingworker:v1
    networks:
      - vote-net
    depends_on:
      - db
      - redis
    # service deployment
    deploy:
      mode: replicated
      replicas: 2
      labels: [APP=VOTING]
      # service resource management
      resources:
        # Hard limit - Docker does not allow to allocate more
        limits:
          cpus: '0.25'
          memory: 512M
        # Soft limit - Docker makes best effort to return to it
        reservations:
          cpus: '0.25'
          memory: 256M
      # service restart policy
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      # service update configuration
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        max_failure_ratio: 0.3
      # placement constraint - in this case on 'worker' nodes only
      placement:
        constraints: [node.role == worker]

networks:
    vote-net:

volumes:
  dbdata:
